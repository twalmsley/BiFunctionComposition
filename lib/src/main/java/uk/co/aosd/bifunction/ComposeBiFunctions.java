/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package uk.co.aosd.bifunction;

import java.util.function.BiFunction;

/**
 * Utility functions to combing BiFunctions for use with an environment parameter.
 *
 * @author Tony Walmsley, AOSD Ltd.
 */
public class ComposeBiFunctions {
    /**
     * No instances needed.
     */
    private ComposeBiFunctions() {
    }

    /**
     * Combines two BiFunctions by treating the first parameter to both functions as an `environment` that needs to
     * be available to both BiFunctions. The return type of the first BiFunction must match the second parameter type
     * of the second BiFunction.
     *
     * @param second a BiFunction - executed after first
     * @param first  a BiFunction - executed before second
     * @param <ENV>  the type of the first parameter of each BiFunction
     * @param <T>    the second parameter to first
     * @param <U>    the return type of first and the type of the second parameter of second
     * @param <V>    the return type of second.
     * @return a combination of the two BiFunctions that implements `second(env, first(env, p1))`
     */
    public static <ENV, T, U, V> BiFunction<ENV, T, V> biCombine(
            final BiFunction<ENV, U, V> second,
            final BiFunction<ENV, T, U> first
    ) {
        return (e, t) -> second.apply(e, first.apply(e, t));
    }

    /**
     * Combines two BiFunctions by treating the first parameter to both functions as an `environment` that needs to
     * be available to both BiFunctions. The return type of the first BiFunction must match the second parameter type
     * of the second BiFunction.
     *
     * @param first  a BiFunction - executed before second
     * @param second a BiFunction - executed after first
     * @param <ENV>  the type of the first parameter of each BiFunction
     * @param <T>    the second parameter to first
     * @param <U>    the return type of first and the type of the second parameter of second
     * @param <V>    the return type of second.
     * @return a combination of the two BiFunctions that implements `second(env, first(env, p1))`
     */
    public static <ENV, T, U, V> BiFunction<ENV, T, V> biAndThen(
            final BiFunction<ENV, T, U> first,
            final BiFunction<ENV, U, V> second
    ) {
        return (e, t) -> second.apply(e, first.apply(e, t));
    }

}
